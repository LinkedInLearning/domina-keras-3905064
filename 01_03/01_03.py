# -*- coding: utf-8 -*-
"""01_03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RKWNyfoARCvqZlJr_nLycZ7oVnHS5c9v
"""

import numpy as np
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D
from keras.utils import to_categorical
from keras.layers import Input

(datos_entrenamiento, etiquetas_entrenamiento), (datos_prueba, etiquetas_prueba) = mnist.load_data()

datos_entrenamiento = datos_entrenamiento / 255.0
datos_prueba = datos_prueba / 255.0
etiquetas_entrenamiento = to_categorical(etiquetas_entrenamiento, 10)
etiquetas_prueba = to_categorical(etiquetas_prueba, 10)

datos_entrenamiento = np.expand_dims(datos_entrenamiento, axis=-1)
datos_prueba = np.expand_dims(datos_prueba, axis=-1)

modelo_cnn = Sequential()
modelo_cnn.add(Input(shape=(28, 28, 1)))
modelo_cnn.add(Conv2D(32, kernel_size=(3, 3), activation='relu'))
modelo_cnn.add(MaxPooling2D(pool_size=(2, 2)))
modelo_cnn.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))
modelo_cnn.add(MaxPooling2D(pool_size=(2, 2)))
modelo_cnn.add(Flatten())
modelo_cnn.add(Dense(128, activation='relu'))
modelo_cnn.add(Dense(10, activation='softmax'))

modelo_cnn.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

modelo_cnn.fit(datos_entrenamiento, etiquetas_entrenamiento, epochs=5, batch_size=32)

puntuacion = modelo_cnn.evaluate(datos_prueba, etiquetas_prueba)

print(f"Precisi√≥n en los datos de prueba: {puntuacion[1]}")